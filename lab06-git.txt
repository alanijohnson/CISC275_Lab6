Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```
	Zayne Johnson
	Alani Johnson


    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
	Shows the common git commands and what they do.

    ```

2.  What does `-ag` cause `git help` to do?

    ```

	Lists all of the git commands

    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```

	Shows the current tracking status of a file in the git repo.

    ```

2.  What does `git add names.txt` do?

    ```

	Adding a file snapshots it in preparation for versioning.

    ```

3.  What does `git commit -m "Add our names."` do?

    ```
	Committing records the snapshot permanantly to the version 	history.

    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
	The indicates that all files should be added


    ```

5.  What does `git commit` (without -m) do?

    ```
	Opens the editor to write a commit message


    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```
	git commit. Using -m limits the length of the message to 50 	characters.


    ```

7.  What does `git log do`?

    ```
	Shows the history of commits.


    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```

	The snapshot has been taken and is ready to be permanently 	placed in the version history.

    ```

    **Unstaged**

    ```

	File has not been snapshotted

    ```

    **Untracked**

    ```
	Git doesn't know about the file


    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```
	Only the modification of the name file will be saved.


    ```

2.  What command do you run to stage changes?

    ```

	git add names.txt
	git commit names.txt

    ```

3.  What command do you run to unstage changes?

    ```

	git reset

    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```

	Shows file differences that haven't been staged

    ```

2.  What does `git diff --cached` display?

    ```
	
	Views the stages you changed for the next commit

    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```
	git reset names.txt
	git add movies.txt
	git commit -m "Added movies.txt"


    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```
	movies.txt has the status modified beacuse git is tracking 	the modifications made to the file


    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```

	git doesn't let you delete locally moditified files. 

    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
	
	The file movies.txt was deleted and a new file last-movies.txt was created. The new is untracked.

    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
	git add .
	git commit -m "Modified names, Added foods, renamed movies"


    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```
	Frozen state of the working tree.


    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
	Staging incrementally leaves less changes to be staged in 	the working tree, but it also allows you to revert to many 	different versions and track individual changes.


    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```
	
	--soft doesn't touch the working tree
	"Head^" indicates the first parent of the tip of the current branch
	resets the head to the last commit, but the changed files remain locally changed

    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```

	resets the current branch one commit backwards

    ```

2.  What is the difference between `--hard` and `--soft`?

    ```

	hard - removes all commits up to a specified commit. The head is actually recommitted
	soft - tells git to reset the head to another commit. The changed files become staged

    ```

3.  What do you think `HEAD` means?

    ```
	HEAD - tip of the current branch; most recent commit
	
    ```

4.  What do you think `HEAD^` means?

    ```

	"Head^" indicates the first parent of the tip of the current branch


    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
